openapi: 3.0.0
info:
  title: LinkAce API
  version: '1.0'
  license:
    name: MIT
  contact:
    url: 'https://github.com/Kovah/LinkAce'
  description: The official documentation of the LinkAce API.
servers:
  - url: 'https://demo.linkace.org'
    description: Demo Server
paths:
  /api/v1/links:
    get:
      summary: 'Links: Get all Links'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkPaginator'
        '401':
          description: Unauthorized
      operationId: get-api-v1-links
      description: Get all links.
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: accept
          required: true
        - schema:
            type: string
            enum:
              - id
              - url
              - title
              - description
              - is_private
              - status
              - check_disabled
              - created_at
              - updated_at
          in: query
          name: order_by
        - schema:
            type: string
            enum:
              - asc
              - desc
          in: query
          name: order_dir
      security:
        - api_token: []
      tags:
        - links
    post:
      summary: 'Links: Create'
      operationId: post-api-v1-links
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Link'
        '401':
          description: Unauthorized
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkRequest'
            examples:
              Example:
                value:
                  info: Examples can be found in the 'Models > Link Request' definition
        description: ''
      security:
        - api_token: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: accept
          required: true
      description: Create a new Link.
      tags:
        - links
  '/api/v1/links/{link_id}':
    parameters:
      - schema:
          type: integer
        name: link_id
        in: path
        required: true
    get:
      summary: 'Links: Link Details'
      operationId: get-api-v1-links-link_id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Link'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: accept
          required: true
      security:
        - api_token: []
      description: 'Get one specific link, including his lists and tags.'
      tags:
        - links
    patch:
      summary: 'Links: Update'
      operationId: patch-api-v1-links-link_id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Link'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkRequest'
            examples:
              Example:
                'Examples can be found in the ''Model: Link Request'' definition': null
                value:
                  info: Examples can be found in the 'Models > Link Request' definition
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: accept
          required: true
      security:
        - api_token: []
      description: Update one specific link.
      tags:
        - links
    delete:
      summary: 'Links: Delete'
      operationId: delete-api-v1-links-link_id
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      security:
        - api_token: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: accept
          required: true
      description: Delete one specific link.
      tags:
        - links
  /api/v1/search/links:
    get:
      summary: Search Links
      tags:
        - search
        - links
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkPaginator'
              examples:
                Example for Query "programming":
                  value:
                    '83': programming
                    '138': programming-books
        '401':
          description: Unauthorized
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkPaginator'
      operationId: get-api-v1-search-links
      description: Search all links saved in LinkAce
      security:
        - api_token: []
      parameters:
        - schema:
            type: string
          in: query
          name: query
          description: Query used to search for Tags
          required: true
        - schema:
            type: string
            default: application/json
          in: header
          name: accept
          required: true
        - schema:
            type: boolean
          in: query
          name: search_title
          description: Enables searching in the title
        - schema:
            type: boolean
          in: query
          description: Enables searching in the description
          name: search_description
        - schema:
            type: boolean
          in: query
          name: private_only
          description: Search for private links only
        - schema:
            type: boolean
          in: query
          name: broken_only
          description: Search for broken links only (Status is not "Ok")
        - schema:
            type: boolean
          in: query
          name: empty_lists
          description: Search for links without any lists attatched
        - schema:
            type: boolean
          in: query
          name: empty_tags
          description: Search for links without any tags attatched
        - schema:
            type: string
          in: query
          name: only_lists
          description: Comma-separated list of list IDs a link must have
        - schema:
            type: string
          in: query
          name: only_tags
          description: Comma-separated list of tag IDs a link must have
        - schema:
            type: string
            default: 'title:asc'
            enum:
              - 'title:asc'
              - 'title:desc'
              - 'url:asc'
              - 'url:desc'
              - 'created_at:asc'
              - 'created_at:desc'
          in: query
          name: order_by
          description: 'Order the results by the following format: "field_to_order:order_direction", e.g. "title:asc"'
    parameters: []
  '/api/v1/links/{link_id}/notes':
    parameters:
      - schema:
          type: integer
        name: link_id
        in: path
        required: true
    get:
      summary: 'Links: Notes for a Link'
      tags:
        - notes
        - links
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotePaginator'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      operationId: get-api-v1-links-link_id-notes
      description: Get all notes of one specific link.
      security:
        - api_token: []
  /api/v1/lists:
    get:
      summary: 'Lists: Get all Lists'
      tags:
        - lists
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPaginator'
        '401':
          description: Unauthorized
      operationId: get-api-v1-lists
      description: Get all lists.
      security:
        - api_token: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: accept
          required: true
        - schema:
            type: string
            enum:
              - id
              - name
              - description
              - is_private
              - created_at
              - updated_at
          in: query
          name: order_by
        - schema:
            type: string
            enum:
              - asc
              - desc
          in: query
          name: order_dir
      requestBody: {}
    post:
      summary: 'Lists: Create'
      operationId: post-api-v1-lists
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        '401':
          description: Unauthorized
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      security:
        - api_token: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: accept
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListRequest'
      description: Create a new List.
      tags:
        - lists
  '/api/v1/lists/{list_id}':
    parameters:
      - schema:
          type: integer
        name: list_id
        in: path
        required: true
    get:
      summary: 'Lists: List Details'
      tags:
        - lists
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      operationId: get-api-v1-lists-list_id
      security:
        - api_token: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: accept
          required: true
      description: Get one specific list.
    patch:
      summary: 'Lists: Update'
      operationId: patch-api-v1-lists-list_id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      security:
        - api_token: []
      parameters:
        - schema:
            type: string
            default: aplicaton/json
          in: header
          name: accept
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListRequest'
      description: Update one specific list.
      tags:
        - lists
    delete:
      summary: 'Lists: Delete'
      operationId: delete-api-v1-lists-list_id
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      security:
        - api_token: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: accept
          required: true
      description: Delete one specific list.
      tags:
        - lists
  '/api/v1/lists/{list_id}/links':
    parameters:
      - schema:
          type: integer
        name: list_id
        in: path
        required: true
    get:
      summary: 'Lists: Links for a List'
      tags:
        - lists
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkPaginator'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      operationId: get-api-v1-lists-list_id-links
      description: Get all links of one specific list.
      security:
        - api_token: []
  /api/v1/search/lists:
    get:
      summary: Search Lists for Link Editing
      tags:
        - search
        - lists
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPaginator'
              examples:
                Example for Query "articles":
                  value:
                    '11': Scientific Articles
                    '23': Web Development Articles
        '401':
          description: Unauthorized
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      operationId: get-api-v1-search-lists
      description: Search Lists to be used for Link editing.
      security:
        - api_token: []
      parameters:
        - schema:
            type: string
          in: query
          name: query
          description: Query used to search for Lists
          required: true
        - schema:
            type: string
            default: application/json
          in: header
          name: accept
          required: true
    parameters: []
  '/api/v1/tags/{tag_id}':
    parameters:
      - schema:
          type: integer
        name: tag_id
        in: path
        required: true
    get:
      summary: 'Tags: Tag Details'
      tags:
        - tags
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      operationId: get-api-v1-tags-tag_id
      security:
        - api_token: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: accept
          required: true
      description: Get one specific tag.
    patch:
      summary: 'Tags: Update'
      operationId: patch-api-v1-tags-tag_id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      security:
        - api_token: []
      parameters:
        - schema:
            type: string
            default: aplicaton/json
          in: header
          name: accept
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagRequest'
      description: Update one specific Tag.
      tags:
        - tags
    delete:
      summary: 'Tag: Delete'
      operationId: delete-api-v1-tags-tag_id
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      security:
        - api_token: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: accept
          required: true
      description: Delete one specific tag.
      tags:
        - tags
  /api/v1/tags:
    get:
      summary: 'Tags: Get all Tags'
      tags:
        - tags
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagPaginator'
        '401':
          description: Unauthorized
      operationId: get-api-v1-tags
      description: Get all tags.
      security:
        - api_token: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: accept
          required: true
        - schema:
            type: string
            enum:
              - id
              - name
              - is_private
              - created_at
              - updated_at
          in: query
          name: order_by
        - schema:
            type: string
            enum:
              - asc
              - desc
          in: query
          name: order_dir
      requestBody: {}
    post:
      summary: 'Tags: Create'
      operationId: post-api-v1-tags
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '401':
          description: Unauthorized
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      security:
        - api_token: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: accept
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagRequest'
      description: Create a new tag.
      tags:
        - tags
  '/api/v1/tags/{tag_id}/links':
    parameters:
      - schema:
          type: integer
        name: tag_id
        in: path
        required: true
    get:
      summary: 'Tags: Links for a Tag'
      tags:
        - tags
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkPaginator'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      operationId: get-api-v1-tags-tag_id-links
      description: Get all links of one specific tag.
      security:
        - api_token: []
  /api/v1/search/tags:
    get:
      summary: Search Tags for Link Editing
      tags:
        - search
        - tags
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagPaginator'
              examples:
                Example for Query "programming":
                  value:
                    '83': programming
                    '138': programming-books
        '401':
          description: Unauthorized
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      operationId: get-api-v1-search-tags
      description: Search tags to be used for Link editing.
      security:
        - api_token: []
      parameters:
        - schema:
            type: string
          in: query
          name: query
          description: Query used to search for Tags
          required: true
        - schema:
            type: string
            default: application/json
          in: header
          name: accept
          required: true
    parameters: []
  '/api/v1/notes/{note_id}':
    parameters:
      - schema:
          type: integer
        name: note_id
        in: path
        required: true
    patch:
      summary: 'Notes: Update'
      operationId: patch-api-v1-notes-note_id
      description: Update one specific Note.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      security:
        - api_token: []
      parameters:
        - schema:
            type: string
            default: aplicaton/json
          in: header
          name: accept
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NoteUpdateRequest'
      tags:
        - notes
    delete:
      summary: 'Note: Delete'
      operationId: delete-api-v1-notes-note_id
      description: Delete one specific note.
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      security:
        - api_token: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: accept
          required: true
      tags:
        - notes
  /api/v1/notes:
    post:
      summary: 'Notes: Create'
      operationId: post-api-v1-notes
      description: Create a new Note.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        '401':
          description: Unauthorized
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      security:
        - api_token: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: accept
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NoteCreateRequest'
      tags:
        - notes
  /api/v1/trash/links:
    get:
      summary: 'Trash: Get Links'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Link'
        '401':
          description: Unauthorized
      operationId: get-api-v1-trash-links
      tags:
        - trash
      description: Get all trashed links.
      security:
        - api_token: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: accept
          required: true
    parameters: []
  /api/v1/trash/lists:
    get:
      summary: 'Trash: Get Lists'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/List'
        '401':
          description: Unauthorized
      operationId: get-api-v1-trash-lists
      tags:
        - trash
      description: Get all trashed lists.
      security:
        - api_token: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: accept
          required: true
    parameters: []
  /api/v1/trash/tags:
    get:
      summary: 'Trash: Get Tags'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
        '401':
          description: Unauthorized
      operationId: get-api-v1-trash-tags
      tags:
        - trash
      description: Get all trashed tags.
      security:
        - api_token: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: accept
          required: true
    parameters: []
  /api/v1/trash/notes:
    get:
      summary: 'Trash: Get Notes'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Note'
        '401':
          description: Unauthorized
      operationId: get-api-v1-trash-notes
      tags:
        - trash
      description: Get all trashed notes.
      security:
        - api_token: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: accept
          required: true
    parameters: []
  /api/v1/trash/clear:
    delete:
      summary: 'Trash: Clear for Model'
      operationId: delete-api-v1-trash-clear
      responses:
        '200':
          description: 'OK, all entries deleted'
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
      description: Delete all trashed entries for a given model.
      security:
        - api_token: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: accept
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: ''
              properties:
                model:
                  type: string
                  description: Model type
                  enum:
                    - links
                    - lists
                    - tags
                    - notes
              required:
                - model
      tags:
        - trash
  /api/v1/trash/restore:
    patch:
      summary: 'Trash: Restore entry'
      operationId: patch-api-v1-trash-restore
      responses:
        '200':
          description: 'OK, entry restored successfully'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Restore one specific entry from the trash.
      security:
        - api_token: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: accept
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                model:
                  type: string
                  description: Entry type
                  enum:
                    - link
                    - list
                    - tag
                    - note
                id:
                  type: integer
                  description: Entry ID
              required:
                - model
                - id
        description: ''
      tags:
        - trash
components:
  schemas:
    Link:
      title: 'Model: Link'
      type: object
      description: ''
      x-examples:
        Example Response for DuckDuckGo.com:
          id: 85
          user_id: 1
          url: 'https://duckduckgo.com'
          title: 'DuckDuckGo — Privacy, simplified.'
          description: 'The Internet privacy company that empowers you to seamlessly take control of your personal information online, without any tradeoffs.'
          icon: fa fa-link
          is_private: false
          status: 1
          check_disabled: false
          lists: []
          tags: []
          created_at: '2020-03-09T19:33:23.000000Z'
          updated_at: '2020-03-09T19:33:23.000000Z'
          deleted_at: null
      properties:
        id:
          type: integer
          minimum: 1
          example: 84
        user_id:
          type: integer
          example: 1
          minimum: 1
        url:
          type: string
          format: uri
          example: 'https://duckduckgo.com'
        title:
          type: string
        description:
          type:
            - string
            - 'null'
        icon:
          type:
            - string
            - 'null'
          pattern: fa fa-link
        is_private:
          type: boolean
        status:
          type: integer
          enum:
            - 1
            - 2
            - 3
        check_disabled:
          type: boolean
        lists:
          type: array
          items:
            $ref: '#/components/schemas/List'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        created_at:
          type: string
          format: date-time
          example: '2020-03-09T19:33:23.000000Z'
        updated_at:
          type: string
          format: date-time
          example: '2020-03-09T19:33:23.000000Z'
        deleted_at:
          type:
            - string
            - 'null'
          format: date-time
          example: '2020-03-09T19:33:23.000000Z'
      x-tags:
        - model
    ValidationError:
      title: 'Model: ValidationError'
      type: object
      properties:
        message:
          type: string
          example: The given data was invalid.
        errors:
          type: object
          properties:
            form_key:
              type: array
              items:
                type: string
              uniqueItems: false
      x-tags:
        - model
    List:
      title: 'Model: List'
      type: object
      x-examples:
        Example of a List:
          id: 3
          user_id: 1
          name: CSS Frameworks
          description: null
          is_private: false
          created_at: '2020-01-24T13:13:02.000000Z'
          updated_at: '2020-01-24T13:13:02.000000Z'
          deleted_at: null
          links: 'http://example.com/api/v1/list/3/links'
      properties:
        id:
          type: integer
        user_id:
          type: integer
        name:
          type: string
        description:
          type:
            - string
            - 'null'
        is_private:
          type: boolean
        created_at:
          type: string
          format: date-time
          example: '2020-03-09T19:33:23.000000Z'
        updated_at:
          type: string
          format: date-time
          example: '2020-03-09T19:33:23.000000Z'
        deleted_at:
          type:
            - string
            - 'null'
          format: date-time
          example: '2020-03-09T19:33:23.000000Z'
        links:
          type: string
          description: Contains the API URL to get the actual links of a list.
      x-tags:
        - model
    Tag:
      title: 'Model: Tag'
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        name:
          type: string
        is_private:
          type: boolean
        created_at:
          type: string
          format: date-time
          example: '2020-03-09T19:33:23.000000Z'
        updated_at:
          type: string
          format: date-time
          example: '2020-03-09T19:33:23.000000Z'
        deleted_at:
          type:
            - string
            - 'null'
          format: date-time
          example: '2020-03-09T19:33:23.000000Z'
      x-examples:
        Example of a Tag:
          id: 118
          user_id: 1
          name: alternative
          is_private: false
          created_at: '2019-02-24T20:39:25.000000Z'
          updated_at: '2019-02-24T20:39:25.000000Z'
          deleted_at: null
      x-tags:
        - model
    LinkPaginator:
      title: 'Paginator: Links'
      type: object
      properties:
        total:
          type: integer
        to:
          type: integer
        prev_page_url:
          type:
            - string
            - 'null'
        per_page:
          type: string
        path:
          type: string
        next_page_url:
          type:
            - string
            - 'null'
        last_page_url:
          type: string
          example: 'http://linkace.localhost/api/v1/links?page=7'
        last_page:
          type: integer
        from:
          type: integer
        first_page_url:
          type: string
          example: 'http://linkace.localhost/api/v1/links?page=1'
        data:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        current_page:
          type: integer
      description: ''
      x-tags:
        - model
    ListPaginator:
      title: 'Paginator: Lists'
      type: object
      properties:
        total:
          type: integer
        to:
          type: integer
        prev_page_url:
          type:
            - string
            - 'null'
        per_page:
          type: string
        path:
          type: string
        next_page_url:
          type:
            - string
            - 'null'
        last_page_url:
          type: string
          example: 'http://linkace.localhost/api/v1/lists?page=7'
        last_page:
          type: integer
        from:
          type: integer
        first_page_url:
          type: string
          example: 'http://linkace.localhost/api/v1/lists?page=1'
        data:
          type: array
          items:
            $ref: '#/components/schemas/List'
        current_page:
          type: integer
      description: ''
      x-tags:
        - model
    ListRequest:
      title: 'Model: List Request'
      type: object
      description: ''
      x-examples:
        Example Request for a List:
          description: Various tools and applications for a more productiove web development.
          is_private: false
          name: Web Development Tools
      properties:
        description:
          type: string
        is_private:
          type: boolean
        name:
          type: string
          example: Web Development Tools
      required:
        - name
      x-tags:
        - model
    LinkRequest:
      title: 'Model: Link Request'
      type: object
      description: |-
        #### Tag and list referencing

        Attention! Tags and lists might be passed in three different ways:
        - comma-separated strings (`'List 1,List 2'`),
        - arrays containing strings (`['List 1', 'List 2']`) or
        - arrays containing Tag / List IDs (`[1,2]`).

        In the first two cases tags / lists are created if they don't exist.
      x-examples:
        Example Request for DuckDuckGo.com:
          url: 'https://duckduckgo.com'
          title: 'DuckDuckGo — Privacy, simplified.'
          description: 'The Internet privacy company that empowers you to seamlessly take control of your personal information online, without any tradeoffs.'
          lists:
            - 5
          tags:
            - 9
            - 13
            - 29
          is_private: false
          check_disabled: false
        Example Request with tags as a string:
          url: 'https://duckduckgo.com'
          title: 'DuckDuckGo — Privacy, simplified.'
          description: 'The Internet privacy company that empowers you to seamlessly take control of your personal information online, without any tradeoffs.'
          lists: 'List 1,List 2'
          tags: 'tag1,tag2,tag3'
          is_private: false
          check_disabled: false
        Example Request with tags as strings in array:
          url: 'https://duckduckgo.com'
          title: 'DuckDuckGo — Privacy, simplified.'
          description: 'The Internet privacy company that empowers you to seamlessly take control of your personal information online, without any tradeoffs.'
          lists:
            - List 1
            - List 2
          tags:
            - tag1
            - tag2
          is_private: false
          check_disabled: false
      properties:
        url:
          type: string
          format: uri
          example: 'https://duckduckgo.com'
        title:
          type: string
        description:
          type: string
        lists:
          type:
            - array
            - string
          description: ''
          items:
            type:
              - integer
              - string
        tags:
          type:
            - array
            - string
          description: ''
          items:
            type:
              - integer
              - string
        is_private:
          type: boolean
        check_disabled:
          type: boolean
      required:
        - url
      x-tags:
        - model
    NotePaginator:
      title: 'Paginator: Notes'
      type: object
      properties:
        total:
          type: integer
        to:
          type: integer
        prev_page_url:
          type:
            - string
            - 'null'
        per_page:
          type: string
        path:
          type: string
        next_page_url:
          type:
            - string
            - 'null'
        last_page_url:
          type: string
          example: 'http://linkace.localhost/api/v1/notes?page=7'
        last_page:
          type: integer
        from:
          type: integer
        first_page_url:
          type: string
          example: 'http://linkace.localhost/api/v1/notes?page=1'
        data:
          type: array
          items:
            $ref: '#/components/schemas/Note'
        current_page:
          type: integer
      description: ''
      x-tags:
        - model
    Note:
      title: 'Model: Note'
      type: object
      description: ''
      x-examples:
        Example Response for a Note:
          id: 85
          user_id: 1
          link_id: 23
          note: 'Interesting article, may be useful for later research about state machines in Go.'
          is_private: false
          created_at: '2020-03-09T19:33:23.000000Z'
          updated_at: '2020-03-09T19:33:23.000000Z'
          deleted_at: null
      properties:
        id:
          type: integer
          minimum: 1
          example: 84
        user_id:
          type: integer
          example: 1
          minimum: 1
        link_id:
          type: integer
          example: 1
          minimum: 1
        note:
          type: string
        is_private:
          type: boolean
        created_at:
          type: string
          format: date-time
          example: '2020-03-09T19:33:23.000000Z'
        updated_at:
          type: string
          format: date-time
          example: '2020-03-09T19:33:23.000000Z'
        deleted_at:
          type:
            - string
            - 'null'
          format: date-time
          example: '2020-03-09T19:33:23.000000Z'
      x-tags:
        - model
    TagRequest:
      title: 'Model: Tag Request'
      type: object
      description: ''
      x-examples:
        Example Request for a Tag:
          name: artificial-intelligence
          is_private: false
      properties:
        name:
          type: string
          example: artificial-intelligence
        is_private:
          type: boolean
      required:
        - name
      x-tags:
        - model
    TagPaginator:
      title: 'Paginator: Tags'
      type: object
      properties:
        total:
          type: integer
        to:
          type: integer
        prev_page_url:
          type:
            - string
            - 'null'
        per_page:
          type: string
        path:
          type: string
        next_page_url:
          type:
            - string
            - 'null'
        last_page_url:
          type: string
          example: 'http://linkace.localhost/api/v1/tags?page=7'
        last_page:
          type: integer
        from:
          type: integer
        first_page_url:
          type: string
          example: 'http://linkace.localhost/api/v1/tags?page=1'
        data:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        current_page:
          type: integer
      description: ''
      x-tags:
        - model
    NoteCreateRequest:
      title: 'Model: Note Create Request'
      type: object
      description: ''
      x-examples:
        Example Request for a Note:
          link_id: 23
          note: 'Interesting article, may be useful for later research about state machines in Go.'
          is_private: false
      properties:
        link_id:
          type: integer
        note:
          type: string
          example: 'Interesting article, may be useful for later research about state machines in Go.'
        is_private:
          type: boolean
      required:
        - link_id
        - note
      x-tags:
        - model
    NoteUpdateRequest:
      title: 'Model: Note Update Request'
      type: object
      description: ''
      x-examples:
        Example Request for a Note:
          note: 'Interesting article, may be useful for later research about state machines in Go.'
          is_private: false
      properties:
        note:
          type: string
          example: 'Interesting article, may be useful for later research about state machines in Go.'
        is_private:
          type: boolean
      required:
        - note
      x-tags:
        - model
  securitySchemes:
    api_token:
      type: http
      scheme: bearer
      description: ''
tags:
  - name: links
  - name: lists
  - name: tags
  - name: notes
  - name: trash
